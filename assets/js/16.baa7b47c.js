(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{501:function(s,e,t){"use strict";t.r(e);var n=t(20),a=Object(n.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("进程和线程")]),s._v(" "),t("h4",{attrs:{id:"进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[s._v("#")]),s._v(" 进程")]),s._v(" "),t("p",[s._v("进程"),t("code",[s._v("Process")]),s._v("是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础，进程是线程的容器。进程是资源分配的最小单位。我们启动一个服务，运行一个实列，就是开一个服务进程，Node.js里通过"),t("code",[s._v("node app.js")]),s._v("开启一个服务进程，多进程就是复制（fork）,fork出来的每个进程都拥有自己的独立空间地址、数据栈，一个进程无法访问另一个进程里定义的变量，数据结构，只有建立IPC通信，进程之间才可以共享数据。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("Node.js中开启进程")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const http=require('http')\nconst server=http.createServer()\nserver.listen(3000,()=>{\n\tprocess.title=\"123\";\n\tconsole.log(process.pid)\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])])])]),s._v(" "),t("h4",{attrs:{id:"线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[s._v("#")]),s._v(" 线程")]),s._v(" "),t("p",[s._v("线程是操作系统能够进行运算调度的最小单位，首先线程是属于进程的，一个进程可以有多个线程，但一个线程只能有一个进程。")]),s._v(" "),t("h5",{attrs:{id:"单线程-一个进程只开一个线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单线程-一个进程只开一个线程"}},[s._v("#")]),s._v(" 单线程：一个进程只开一个线程")]),s._v(" "),t("p",[s._v("JavaScript就是属于单线程，程序按顺序执行（先不讨论异步），上面的执行完成后才能执行下面的，当使用单线程语言编码时切勿有过多耗时的同步操作，否则线程会造成阻塞，导致线程阻塞，所以进行编码时，尽可能使用异步操作。")]),s._v(" "),t("p",[s._v("eg:同步任务耗时造成线程阻塞")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const http=require('http')\nconst longComputation=()=>{\n\tlet sum=0;\n\tfor(let i=0;i<1e10;i++){\n\t\tsum +=1\n\t}\n\treturn sum\n}\nconst server=http.createServer()\nserver.on('request',(req,res)=>{\n\tif(req.url==='/compute'){\n\t\tconsole.log('start',new Date())\n\t\tconst sum=lognComputation()\n\t\tconsole.log('end',new Date())\n\t\treturn res.end(`Sum is ${sum}`)\n\t}else{\n\t\tres.end('Ok')\n\t}\n})\nserver.listen(3000)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("p",[s._v("当我们调用"),t("code",[s._v("/compute")]),s._v("的时候，如果想调用其他的路由地址比如"),t("code",[s._v("/")]),s._v("大约需要15s时间，也可以说一个用户请求完第一个"),t("code",[s._v("compute")]),s._v("接口后需要等待15秒，这对于用户来说是极其不友好的。")]),s._v(" "),t("p",[s._v("单线程的一些说明")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("Node.js虽然是单线程模型，但是其基于事件驱动、异步非阻塞模式，可以应用于高并发场景，避免了线程创建、线程之间上下文切换所产生的资源开销。")])]),s._v(" "),t("li",[t("p",[s._v("当你的项目中需要有大量计算，CPU耗时的操作的时候，要注意考虑开启多进程来完成")])]),s._v(" "),t("li",[t("p",[s._v("Node.js开发过程中，错误会引起整个应用退出，应用的健壮性值得考验，尤其是错误的异常抛出，以及进程守护是必须做的。")])]),s._v(" "),t("li",[t("p",[s._v("单线程无法利用多核CPU，但是后来Node.js提供的API以及一些第三方工具相应都得到解决。")])])]),s._v(" "),t("h3",{attrs:{id:"node-js中的进程与线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node-js中的进程与线程"}},[s._v("#")]),s._v(" Node.js中的进程与线程")]),s._v(" "),t("p",[s._v("Node.js是JavaScript在服务端的运行环境，构建在chrome的V8引擎之上，基于事件驱动、非阻塞I/O模型，充分利用操作系提供的异步I/O进行多任务的执行，适合于I/O密集型的应用场景，因为异步，程序无需阻塞等待结果返回，而是基于回调通知的机制，原本同步模式等待的时间，则可以用来处理其他任务。")]),s._v(" "),t("p",[s._v("在Web服务器方面，著名的Nginx也是采用此模式（事件驱动），避免了多线程的线程创建，线程上下文切换的开销")]),s._v(" "),t("p",[s._v("在单核CPU系统之上我们采用单进程+单线程的模式来开发。在多核CPU系统上，可以通过"),t("code",[s._v("child_process.fork")]),s._v("开启多个进程，即多进程+单线程模式。注意：开启多进程不是为了解决高并发，主要是解决了单进程模式下Node.js CPU利用率不足的情况，充分利用多核CPU的性能。")]),s._v(" "),t("h3",{attrs:{id:"node-js中的进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node-js中的进程"}},[s._v("#")]),s._v(" Node.js中的进程")])])}),[],!1,null,null,null);e.default=a.exports}}]);